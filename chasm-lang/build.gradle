buildscript {
    repositories {
        exclusiveContent {
            forRepository {
                ivy {
                    url 'https://javacc.com/download/'

                    patternLayout {
                        artifact '/[module].[ext]'
                    }

                    metadataSources { artifact() }
                }
            }
            filter {
                includeGroup "javacc21"
            }
        }
    }
    dependencies {
        classpath 'javacc21:javacc-full'
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
}

group 'org.quiltmc.chasm'
version '0.0.1'

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

compileTestJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

checkstyle {
    toolVersion "9.1"
    ignoreFailures(false)
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'quiltSnapshot'
            url = System.getenv('SNAPSHOTS_URL')

            credentials {
                username = System.getenv('SNAPSHOTS_USERNAME')
                password = System.getenv('SNAPSHOTS_PASSWORD')
            }
        }
    }

    publications {
        snapshot(MavenPublication) {
            version = project.version + "-SNAPSHOT"

            from components.java
        }
    }
}

tasks.register("generateParser", JavaCCTask) {
    grammarFile = file("src/main/java/org/quiltmc/chasm/lang/internal/parse/Parser.jj")
    outputDir = file("$buildDir/generated/sources/javacc")
}

sourceSets {
    main {
        java {
            srcDir generateParser.outputDir
        }
    }
}

abstract class JavaCCTask extends DefaultTask {
    @InputFile
    abstract RegularFileProperty getGrammarFile()

    @OutputDirectory
    abstract DirectoryProperty getOutputDir()

    @TaskAction
    def run() {
        project.delete(outputDir)

        def retVal = com.javacc.Main.mainProgram(
                grammarFile.get().asFile.toPath(),
                outputDir.get().asFile.toPath(),
                "java",
                8,
                true,
                new HashMap<String, String>()
        )

        if (retVal != 0) {
            throw new RuntimeException("JavaCC returned a non-zero exit code.")
        }
    }
}
