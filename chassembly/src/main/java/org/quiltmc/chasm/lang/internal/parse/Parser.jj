options {
    PARSER_PACKAGE = "org.quiltmc.chasm.lang.internal.parse";
    BASE_NAME = "";
    TABS_TO_SPACES = 4;
    TREE_BUILDING_ENABLED = false;
}

PARSER_BEGIN(Parser)

import java.util.ArrayList;
import java.util.LinkedHashMap;

import org.quiltmc.chasm.lang.api.ast.BinaryNode;
import org.quiltmc.chasm.lang.api.ast.BooleanNode;
import org.quiltmc.chasm.lang.api.ast.CallNode;
import org.quiltmc.chasm.lang.api.ast.FloatNode;
import org.quiltmc.chasm.lang.api.ast.IndexNode;
import org.quiltmc.chasm.lang.api.ast.IntegerNode;
import org.quiltmc.chasm.lang.api.ast.LambdaNode;
import org.quiltmc.chasm.lang.api.ast.ListNode;
import org.quiltmc.chasm.lang.api.ast.NullNode;
import org.quiltmc.chasm.lang.api.ast.StringNode;
import org.quiltmc.chasm.lang.api.ast.MapNode;
import org.quiltmc.chasm.lang.api.ast.MemberNode;
import org.quiltmc.chasm.lang.api.ast.Node;
import org.quiltmc.chasm.lang.api.ast.ReferenceNode;
import org.quiltmc.chasm.lang.api.ast.TernaryNode;
import org.quiltmc.chasm.lang.api.ast.UnaryNode;
import org.quiltmc.chasm.lang.internal.parse.SourceSpan;

public class Parser {

}

PARSER_END(Parser)

// Productions
Node file():
{
    Node e;
}
{
    e = expression()
    <EOF>
    { return e; }
}

// Expressions
// Note: These are nested according to operator precedence

Node literalExpression():
{
    Token start = getNextToken();
    Token t;
    Node n;
}
{
    (
        t = <NullLiteral>
        { n = new NullNode(); }
        |
        t = <BooleanLiteral>
        { n = BooleanNode.from(Boolean.parseBoolean(t.getImage())); }
        |
        t = <DecIntegerLiteral>
        { n = new IntegerNode(Long.parseLong(t.getImage())); }
        |
        t = <HexIntegerLiteral>
        { n = new IntegerNode(Long.parseLong(t.getImage().substring(2), 16)); }
        |
        t = <BinIntegerLiteral>
        { n = new IntegerNode(Long.parseLong(t.getImage().substring(2), 2)); }
        |
        t = <FloatLiteral>
        { n = new FloatNode(Double.parseDouble(t.getImage())); }
        |
        t = <StringLiteral>
        { n = new StringNode(t.getImage().substring(1, t.getImage().length() - 1)); }
        |
        t = <CharLiteral>
        { n = new IntegerNode((long) t.getImage().charAt(1)); }
    )

    {
        SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node referenceExpression():
{
    Token start = getNextToken();
    boolean g = false;
    Token t;
}
{
    (
        "$"
        { g = true; }
    )?
    t = <Identifier>
    {
        Node n = new ReferenceNode(t.getImage(), g);
        SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node parenthesesExpression():
{
    Node e;
}
{
    <LeftParentheses>
    e = expression()
    <RightParentheses>
    { return e; }
}

Node listExpression():
{
    Token start = getNextToken();
    ArrayList<Node> entries = new ArrayList<>();
    Node e;
}
{
    <LeftBrackets>
        (
            e = expression()
            { entries.add(e); }
            (
                <Comma>
                e = expression()
                { entries.add(e); }
            )*
            (
                <Comma>
            )?
        )?
    <RightBrackets>
    {
        Node n = new ListNode(entries);
        SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node mapExpression():
{
    Token start = getNextToken();
    LinkedHashMap<String, Node> entries = new LinkedHashMap<>();
    Token t;
    Node e;
}
{
    <LeftBraces>
        (
            t = <Identifier>
            <Colon>
            e = expression()
            { entries.put(t.getImage(), e); }
            (
                <Comma>
                t = <Identifier>
                <Colon>
                e = expression()
                { entries.put(t.getImage(), e); }
            )*
            (
                <Comma>
            )?
        )?
    <RightBraces>
    {
        Node n = new MapNode(entries);
        SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node primaryExpression():
{
    Node e;
}
{
    (
        e = literalExpression()
        |
        e = referenceExpression()
        |
        e = parenthesesExpression()
        |
        e = listExpression()
        |
        e = mapExpression()
    )
    { return e; }
}

Node argumentExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    Token t;
}
{
    e = primaryExpression()
    (
        (
            <LeftParentheses>
            a = expression()
            <RightParentheses>
            {
                e = new CallNode(e, a);
                SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
        |
        (
            <LeftBrackets>
            a = expression()
            <RightBrackets>
            {
                e = new IndexNode(e, a);
                SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
        |
        (
            <Dot>
            t = <Identifier>
            {
                e = new MemberNode(e, t.getImage());
                SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
    )*
    { return e; }
}

Node unaryExpression():
{
    Token start = getNextToken();
    Node e;
    UnaryNode.Operator o = null;
}
{
    (
        <PlusOperator>
        { o = UnaryNode.Operator.PLUS; }
        |
        <MinusOperator>
        { o = UnaryNode.Operator.MINUS; }
        |
        <NotOperator>
        { o = UnaryNode.Operator.NOT; }
        |
        <InvertOperator>
        { o = UnaryNode.Operator.INVERT; }
    )?
    e = argumentExpression()
    {
        if (o != null) {
            Node n = new UnaryNode(e, o);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            n.getMetadata().put(SourceSpan.class, span);
            return n;
        } else {
            return e;
        }
    }
}

Node multiplicativeExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = unaryExpression()
    (
        (
            <MultiplyOperator>
            { o = BinaryNode.Operator.MULTIPLY; }
            |
            <DivideOperator>
            { o = BinaryNode.Operator.DIVIDE; }
            |
            <ModuloOperator>
            { o = BinaryNode.Operator.MODULO; }
        )
        a = unaryExpression()
        {
            e = new BinaryNode(e, o, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node additiveExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = multiplicativeExpression()
    (
        (
            <PlusOperator>
            { o = BinaryNode.Operator.PLUS; }
            |
            <MinusOperator>
            { o = BinaryNode.Operator.MINUS; }
        )
        a = multiplicativeExpression()
        {
            e = new BinaryNode(e, o, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node shiftExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = additiveExpression()
    (
        (
            <ShiftLeftOperator>
            { o = BinaryNode.Operator.SHIFT_LEFT; }
            |
            <ShiftRightOperator>
            { o = BinaryNode.Operator.SHIFT_RIGHT; }
            |
            <ShiftRightUnsignedOperator>
            { o = BinaryNode.Operator.SHIFT_RIGHT_UNSIGNED; }
        )
        a = additiveExpression()
        {
            e = new BinaryNode(e, o, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node relationalExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = shiftExpression()
    (
        (
            <LessThanOperator>
            { o = BinaryNode.Operator.LESS_THAN; }
            |
            <LessThanOrEqualOperator>
            { o = BinaryNode.Operator.LESS_THAN_OR_EQUAL; }
            |
            <GreaterThanOperator>
            { o = BinaryNode.Operator.GREATER_THAN; }
            |
            <GreaterThanOrEqualOperator>
            { o = BinaryNode.Operator.GREATER_THAN_OR_EQUAL; }
        )
        a = shiftExpression()
        {
            e = new BinaryNode(e, o, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node equalityExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = relationalExpression()
    (
        (
            <EqualOperator>
            { o = BinaryNode.Operator.EQUAL; }
            |
            <NotEqualOperator>
            { o = BinaryNode.Operator.NOT_EQUAL; }
        )
        a = relationalExpression()
        {
            e = new BinaryNode(e, o, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseAndExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = equalityExpression()
    (
        <BitwiseAndOperator>
        a = equalityExpression()
        {
            e = new BinaryNode(e, BinaryNode.Operator.BITWISE_AND, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseXorExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseAndExpression()
    (
        <BitwiseXorOperator>
        a = bitwiseAndExpression()
        {
            e = new BinaryNode(e, BinaryNode.Operator.BITWISE_XOR, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseOrExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseXorExpression()
    (
        <BitwiseOrOperator>
        a = bitwiseXorExpression()
        {
            e = new BinaryNode(e, BinaryNode.Operator.BITWISE_OR, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node booleanAndExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseOrExpression()
    (
        <BooleanAndOperator>
        a = bitwiseOrExpression()
        {
            e = new BinaryNode(e, BinaryNode.Operator.BOOLEAN_AND, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node booleanOrExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = booleanAndExpression()
    (
        <BooleanOrOperator>
        a = booleanAndExpression()
        {
            e = new BinaryNode(e, BinaryNode.Operator.BOOLEAN_OR, a);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node ternaryExpression():
{
    Token start = getNextToken();
    Node e;
    Node t;
    Node f;
}
{
    e = booleanOrExpression()
    (
        <TernaryOperator>
        t = ternaryExpression()
        <Colon>
        f = ternaryExpression()
        {
            e = new TernaryNode(e, t, f);
            SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )?
    { return e; }
}

Node lambdaExpression():
{
    Token start = getNextToken();
    Token t;
    Node e;
}
{
    t = <Identifier>
    <LambdaOperator>
    e = expression()
    {
        Node n = new LambdaNode(t.getImage(), e );
        SourceSpan span = SourceSpan.fromToken(start).join(SourceSpan.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node expression():
{
    Token start = getNextToken();
    Node e;
}
{
    LOOKAHEAD(2)
    e = lambdaExpression()
    { return e; }
    |
    e = ternaryExpression()
    { return e; }
}

// Tokens
SKIP: {
    <Space: [" "] >
    |
    <Newline: ["\n"] >
}

// Literal Tokens
TOKEN: {
    <NullLiteral: "null">
    |
    <BooleanLiteral: "true" | "false">
    |
    <DecIntegerLiteral: ("+" | "-")? (["0" - "9"])+ >
    |
    <HexIntegerLiteral: "0x" (["0" - "9", "a" - "f", "A"-"F"])+ >
    |
    <BinIntegerLiteral: "0b" (["0" - "1"])+ >
    |
    <FloatLiteral: ("+" | "-")? (["0" - "9"])+ "." (["0" - "9"])+ ("e" ("+" | "-")? (["0" - "9"])+)?>
    |
    <#StringChar: ~["\""] | "\\\"">
    |
    <StringLiteral: "\"" (<StringChar>)* "\"" >
    |
    <#Char: ~["'"] | "\\\'" >
    |
    <CharLiteral: "'" <Char> "'" >
}

// Identifier
TOKEN: {
    <Identifier: ["_", "a" - "z", "A" - "Z"] (["_", "a" - "z", "A" - "Z", "0" - "9"])* >
}

// Operators
TOKEN : {
    <PlusOperator: "+" >
    |
    <MinusOperator: "-" >
    |
    <NotOperator: "!" >
    |
    <InvertOperator: "~" >
    |
    <MultiplyOperator: "*" >
    |
    <DivideOperator: "/" >
    |
    <ModuloOperator: "%" >
    |
    <ShiftLeftOperator: "<<" >
    |
    <ShiftRightOperator: ">>" >
    |
    <ShiftRightUnsignedOperator: ">>>" >
    |
    <LessThanOperator: "<" >
    |
    <LessThanOrEqualOperator: "<=" >
    |
    <GreaterThanOperator: ">" >
    |
    <GreaterThanOrEqualOperator: ">=" >
    |
    <EqualOperator: "=" >
    |
    <NotEqualOperator: "!=" >
    |
    <BitwiseAndOperator: "&" >
    |
    <BitwiseXorOperator: "^" >
    |
    <BitwiseOrOperator: "|" >
    |
    <BooleanAndOperator: "&&" >
    |
    <BooleanOrOperator: "||" >
    |
    <TernaryOperator: "?" >
    |
    <LambdaOperator: "->" >
}

// Punctuation
TOKEN : {
    <Dot: ".">
    |
    <Comma: "," >
    |
    <Colon: ":" >
    |
    <LeftParentheses: "(" >
    |
    <RightParentheses: ")" >
    |
    <LeftBrackets: "[" >
    |
    <RightBrackets: "]" >
    |
    <LeftBraces: "{" >
    |
    <RightBraces: "}" >
}
