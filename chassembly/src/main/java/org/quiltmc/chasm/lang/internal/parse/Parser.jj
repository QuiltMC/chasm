options {
    PARSER_PACKAGE = "org.quiltmc.chasm.lang.internal.parse";
    BASE_NAME = "";
    TABS_TO_SPACES = 4;
    TREE_BUILDING_ENABLED = false;
}

PARSER_BEGIN(Parser)

import org.quiltmc.chasm.lang.api.ast.Ast;
import org.quiltmc.chasm.lang.api.ast.BinaryNode;
import org.quiltmc.chasm.lang.api.ast.ListNode;
import org.quiltmc.chasm.lang.api.ast.MapNode;
import org.quiltmc.chasm.lang.api.ast.Node;
import org.quiltmc.chasm.lang.api.ast.UnaryNode;
import org.quiltmc.chasm.lang.internal.parse.SourceSpanImpl;
import org.quiltmc.chasm.lang.api.eval.SourceSpan;

public class Parser {
    private static String extractTextualLiteral(String image) {
        StringBuilder sb = new StringBuilder(image.length() - 2);
        for (int i = 1, e = image.length() - 1; i < e; i++) {
            char c = image.charAt(i);
            if (c == '\\') {
                c = image.charAt(++i);
            }
            sb.append(c);
        }
        return sb.toString();
    }
}

PARSER_END(Parser)

// Productions
Node file():
{
    Node e;
}
{
    e = expression()
    <EOF>
    { return e; }
}

// Expressions
// Note: These are nested according to operator precedence

Node literalExpression():
{
    Token start = getNextToken();
    Token t;
    Node n;
}
{
    (
        t = <NullLiteral>
        { n = Ast.nullNode(); }
        |
        t = <BooleanLiteral>
        { n = Ast.literal(Boolean.parseBoolean(t.getImage())); }
        |
        t = <DecIntegerLiteral>
        { n = Ast.literal(Long.parseLong(t.getImage())); }
        |
        t = <HexIntegerLiteral>
        { n = Ast.literal(Long.parseLong(t.getImage().substring(2), 16)); }
        |
        t = <BinIntegerLiteral>
        { n = Ast.literal(Long.parseLong(t.getImage().substring(2), 2)); }
        |
        t = <FloatLiteral>
        { n = Ast.literal(Double.parseDouble(t.getImage())); }
        |
        t = <StringLiteral>
        { n = Ast.literal(extractTextualLiteral(t.getImage())); }
        |
        t = <CharLiteral>
        { n = Ast.literal(extractTextualLiteral(t.getImage()).charAt(0)); }
    )

    {
        SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node referenceExpression():
{
    Token start = getNextToken();
    boolean g = false;
    Token t;
}
{
    (
        "$"
        { g = true; }
    )?
    ( t = <Identifier> | t = <ReferenceLiteral> )
    {
        String s = t.getImage();
        if (s.startsWith("`")) {
            s = extractTextualLiteral(s);
        }
        Node n = g ? Ast.globalRef(s) : Ast.ref(s);
        SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node parenthesesExpression():
{
    Node e;
}
{
    <LeftParentheses>
    e = expression()
    <RightParentheses>
    { return e; }
}

Node listExpression():
{
    Token start = getNextToken();
    ListNode n = Ast.emptyList();
    Node e;
}
{
    <LeftBrackets>
        (
            e = expression()
            { n.add(e); }
            (
                LOOKAHEAD(2)
                <Comma>
                e = expression()
                { n.add(e); }
            )*
            (
                <Comma>
            )?
        )?
    <RightBrackets>
    {
        SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node mapExpression():
{
    Token start = getNextToken();
    MapNode n = Ast.emptyMap();
    Token t;
    String key;
    Node e;
}
{
    <LeftBraces>
        (
            (
                t = <Identifier>
                { key = t.getImage(); }
                |
                t = <StringLiteral>
                { key = extractTextualLiteral(t.getImage()); }
            )
            <Colon>
            e = expression()
            { n.put(key, e); }
            (
                LOOKAHEAD(2)
                <Comma>
                (
                    t = <Identifier>
                    { key = t.getImage(); }
                    |
                    t = <StringLiteral>
                    { key = extractTextualLiteral(t.getImage()); }
                )
                <Colon>
                e = expression()
                { n.put(key, e); }
            )*
            (
                <Comma>
            )?
        )?
    <RightBraces>
    {
        SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node primaryExpression():
{
    Node e;
}
{
    (
        e = literalExpression()
        |
        e = referenceExpression()
        |
        e = parenthesesExpression()
        |
        e = listExpression()
        |
        e = mapExpression()
    )
    { return e; }
}

Node argumentExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    Token t;
}
{
    e = primaryExpression()
    (
        (
            <LeftParentheses>
            a = expression()
            <RightParentheses>
            {
                e = Ast.call(e, a);
                SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
        |
        (
            <LeftBrackets>
            a = expression()
            <RightBrackets>
            {
                e = Ast.index(e, a);
                SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
        |
        (
            <Dot>
            ( t = <Identifier> | t = <ReferenceLiteral> )
            {
                String s = t.getImage();
                if (s.startsWith("`")) {
                    s = extractTextualLiteral(s);
                }
                e = Ast.member(e, s);
                SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
                e.getMetadata().put(SourceSpan.class, span);
            }
        )
    )*
    { return e; }
}

Node unaryExpression():
{
    Token start = getNextToken();
    Node e;
    UnaryNode.Operator o = null;
}
{
    (
        <PlusOperator>
        { o = UnaryNode.Operator.PLUS; }
        |
        <MinusOperator>
        { o = UnaryNode.Operator.MINUS; }
        |
        <NotOperator>
        { o = UnaryNode.Operator.NOT; }
        |
        <InvertOperator>
        { o = UnaryNode.Operator.INVERT; }
    )?
    e = argumentExpression()
    {
        if (o != null) {
            Node n = Ast.unary(o, e);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            n.getMetadata().put(SourceSpan.class, span);
            return n;
        } else {
            return e;
        }
    }
}

Node multiplicativeExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = unaryExpression()
    (
        (
            <MultiplyOperator>
            { o = BinaryNode.Operator.MULTIPLY; }
            |
            <DivideOperator>
            { o = BinaryNode.Operator.DIVIDE; }
            |
            <ModuloOperator>
            { o = BinaryNode.Operator.MODULO; }
        )
        a = unaryExpression()
        {
            e = Ast.binary(e, o, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node additiveExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = multiplicativeExpression()
    (
        (
            <PlusOperator>
            { o = BinaryNode.Operator.PLUS; }
            |
            <MinusOperator>
            { o = BinaryNode.Operator.MINUS; }
        )
        a = multiplicativeExpression()
        {
            e = Ast.binary(e, o, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node shiftExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = additiveExpression()
    (
        (
            <ShiftLeftOperator>
            { o = BinaryNode.Operator.SHIFT_LEFT; }
            |
            <ShiftRightOperator>
            { o = BinaryNode.Operator.SHIFT_RIGHT; }
            |
            <ShiftRightUnsignedOperator>
            { o = BinaryNode.Operator.SHIFT_RIGHT_UNSIGNED; }
        )
        a = additiveExpression()
        {
            e = Ast.binary(e, o, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node relationalExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = shiftExpression()
    (
        (
            <LessThanOperator>
            { o = BinaryNode.Operator.LESS_THAN; }
            |
            <LessThanOrEqualOperator>
            { o = BinaryNode.Operator.LESS_THAN_OR_EQUAL; }
            |
            <GreaterThanOperator>
            { o = BinaryNode.Operator.GREATER_THAN; }
            |
            <GreaterThanOrEqualOperator>
            { o = BinaryNode.Operator.GREATER_THAN_OR_EQUAL; }
        )
        a = shiftExpression()
        {
            e = Ast.binary(e, o, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node equalityExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
    BinaryNode.Operator o;
}
{
    e = relationalExpression()
    (
        (
            <EqualOperator>
            { o = BinaryNode.Operator.EQUAL; }
            |
            <NotEqualOperator>
            { o = BinaryNode.Operator.NOT_EQUAL; }
        )
        a = relationalExpression()
        {
            e = Ast.binary(e, o, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseAndExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = equalityExpression()
    (
        <BitwiseAndOperator>
        a = equalityExpression()
        {
            e = Ast.binary(e, BinaryNode.Operator.BITWISE_AND, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseXorExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseAndExpression()
    (
        <BitwiseXorOperator>
        a = bitwiseAndExpression()
        {
            e = Ast.binary(e, BinaryNode.Operator.BITWISE_XOR, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node bitwiseOrExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseXorExpression()
    (
        <BitwiseOrOperator>
        a = bitwiseXorExpression()
        {
            e = Ast.binary(e, BinaryNode.Operator.BITWISE_OR, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node booleanAndExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = bitwiseOrExpression()
    (
        <BooleanAndOperator>
        a = bitwiseOrExpression()
        {
            e = Ast.binary(e, BinaryNode.Operator.BOOLEAN_AND, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node booleanOrExpression():
{
    Token start = getNextToken();
    Node e;
    Node a;
}
{
    e = booleanAndExpression()
    (
        <BooleanOrOperator>
        a = booleanAndExpression()
        {
            e = Ast.binary(e, BinaryNode.Operator.BOOLEAN_OR, a);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )*
    { return e; }
}

Node ternaryExpression():
{
    Token start = getNextToken();
    Node e;
    Node t;
    Node f;
}
{
    e = booleanOrExpression()
    (
        <TernaryOperator>
        t = ternaryExpression()
        <Colon>
        f = ternaryExpression()
        {
            e = Ast.ternary(e, t, f);
            SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
            e.getMetadata().put(SourceSpan.class, span);
        }
    )?
    { return e; }
}

Node lambdaExpression():
{
    Token start = getNextToken();
    Token t;
    Node e;
}
{
    t = <Identifier>
    <LambdaOperator>
    e = expression()
    {
        Node n = Ast.lambda(t.getImage(), e);
        SourceSpanImpl span = SourceSpanImpl.fromToken(start).join(SourceSpanImpl.fromToken(lastConsumedToken));
        n.getMetadata().put(SourceSpan.class, span);
        return n;
    }
}

Node expression():
{
    Token start = getNextToken();
    Node e;
}
{
    LOOKAHEAD(2)
    e = lambdaExpression()
    { return e; }
    |
    e = ternaryExpression()
    { return e; }
}

// Tokens
SKIP: {
    <Space: [" "] >
    |
    <Newline: ["\n"] >
    |
    <LineComment: "//" (~["\n"])* >
    |
    <InlineComment: "/*" (~["*"] | ("*" ~["/"]))* "*/" >
}

// Literal Tokens
TOKEN: {
    <NullLiteral: "null">
    |
    <BooleanLiteral: "true" | "false">
    |
    <#Sign: "+" | "-">
    |
    <#Digit: ["0" - "9"]>
    |
    <#HexDigit: <Digit> | ["a" - "f", "A" - "F"] >
    |
    <DecIntegerLiteral: (<Sign>)? (<Digit>)+ >
    |
    <HexIntegerLiteral: (<Sign>)? "0x" (<HexDigit>)+ >
    |
    <BinIntegerLiteral: (<Sign>)? "0b" (["0" - "1"])+ >
    |
    <#SpecialFloatLiteral: (<Sign>)? ("NaN" | "Infinity")>
    |
    <#DecFloatLiteral: (<Sign>)? (((<Digit>)+ "." (<Digit>)*) | ("." (<Digit>)+)) (("e" | "E") (<Sign>)? (<Digit>)+)? >
    |
    <FloatLiteral: <SpecialFloatLiteral> | <DecFloatLiteral> >
    |
    <#StringChar: ~["\"", "\\"] | "\\\"" | "\\\\">
    |
    <StringLiteral: "\"" (<StringChar>)* "\"" >
    |
    <#Char: ~["'", "\\"] | "\\'" | "\\\\" >
    |
    <CharLiteral: "'" <Char> "'" >
    |
    <#ReferenceLiteralChar: ~["`", "\\"] | "\\`" | "\\\\" >
    |
    <ReferenceLiteral: "`" (<ReferenceLiteralChar>)* "`" >
}

// Identifier
TOKEN: {
    <Identifier: ["_", "a" - "z", "A" - "Z"] (["_", "a" - "z", "A" - "Z", "0" - "9"])* >
}

// Operators
TOKEN : {
    <PlusOperator: "+" >
    |
    <MinusOperator: "-" >
    |
    <NotOperator: "!" >
    |
    <InvertOperator: "~" >
    |
    <MultiplyOperator: "*" >
    |
    <DivideOperator: "/" >
    |
    <ModuloOperator: "%" >
    |
    <ShiftLeftOperator: "<<" >
    |
    <ShiftRightOperator: ">>" >
    |
    <ShiftRightUnsignedOperator: ">>>" >
    |
    <LessThanOperator: "<" >
    |
    <LessThanOrEqualOperator: "<=" >
    |
    <GreaterThanOperator: ">" >
    |
    <GreaterThanOrEqualOperator: ">=" >
    |
    <EqualOperator: "=" >
    |
    <NotEqualOperator: "!=" >
    |
    <BitwiseAndOperator: "&" >
    |
    <BitwiseXorOperator: "^" >
    |
    <BitwiseOrOperator: "|" >
    |
    <BooleanAndOperator: "&&" >
    |
    <BooleanOrOperator: "||" >
    |
    <TernaryOperator: "?" >
    |
    <LambdaOperator: "->" >
}

// Punctuation
TOKEN : {
    <Dot: ".">
    |
    <Comma: "," >
    |
    <Colon: ":" >
    |
    <LeftParentheses: "(" >
    |
    <RightParentheses: ")" >
    |
    <LeftBrackets: "[" >
    |
    <RightBrackets: "]" >
    |
    <LeftBraces: "{" >
    |
    <RightBraces: "}" >
}
